{"remainingRequest":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\src\\views\\message\\message.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\src\\views\\message\\message.vue","mtime":1614579763271},{"path":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpAaW1wb3J0ICIuL21lc3NhZ2UubGVzcyI7DQo="},{"version":3,"sources":["message.vue"],"names":[],"mappings":";AACA","file":"message.vue","sourceRoot":"src/views/message","sourcesContent":["<style lang=\"less\">\r\n@import \"./message.less\";\r\n</style>\r\n\r\n<template>\r\n  <div class=\"message-main-con\">\r\n    <div class=\"message-mainlist-con\">\r\n      <div>\r\n        <Button @click=\"setCurrentMesType('unread')\" size=\"large\" long type=\"text\">\r\n          <div class=\"mes-wrap\">\r\n            <transition name=\"mes-current-type-btn\">\r\n              <Icon v-show=\"currentMessageType == 'unread'\" type=\"md-checkmark\"></Icon>\r\n            </transition>\r\n            <span class=\"mes-type-btn-text\">未读消息</span>\r\n            <Badge\r\n              class=\"message-count-badge-outer\"\r\n              class-name=\"message-count-badge-red\"\r\n              :count=\"unreadCount\"\r\n            ></Badge>\r\n          </div>\r\n        </Button>\r\n      </div>\r\n      <div>\r\n        <Button @click=\"setCurrentMesType('hasread')\" size=\"large\" long type=\"text\">\r\n          <div class=\"mes-wrap\">\r\n            <transition name=\"mes-current-type-btn\">\r\n              <Icon v-show=\"currentMessageType == 'hasread'\" type=\"md-checkmark\"></Icon>\r\n            </transition>\r\n            <span class=\"mes-type-btn-text\">已读消息</span>\r\n            <Badge\r\n              class=\"message-count-badge-outer\"\r\n              class-name=\"message-count-badge\"\r\n              :count=\"hasreadCount\"\r\n            ></Badge>\r\n          </div>\r\n        </Button>\r\n      </div>\r\n      <div>\r\n        <Button @click=\"setCurrentMesType('recyclebin')\" size=\"large\" long type=\"text\">\r\n          <div class=\"mes-wrap\">\r\n            <transition name=\"mes-current-type-btn\">\r\n              <Icon v-show=\"currentMessageType == 'recyclebin'\" type=\"md-checkmark\"></Icon>\r\n            </transition>\r\n            <span class=\"mes-type-btn-text\">回收站</span>\r\n            <Badge\r\n              class=\"message-count-badge-outer\"\r\n              class-name=\"message-count-badge\"\r\n              :count=\"recyclebinCount\"\r\n            ></Badge>\r\n          </div>\r\n        </Button>\r\n      </div>\r\n    </div>\r\n    <div class=\"message-content-con\">\r\n      <transition name=\"view-message\">\r\n        <div v-if=\"showMesTitleList\" class=\"message-title-list-con\">\r\n          <Table\r\n            ref=\"messageList\"\r\n            :loading=\"loading\"\r\n            :columns=\"mesTitleColumns\"\r\n            :data=\"currentMesList\"\r\n            :no-data-text=\"noDataText\"\r\n          ></Table>\r\n          <Page\r\n            :current=\"params.pageNumber\"\r\n            :total=\"total\"\r\n            :page-size=\"params.pageSize\"\r\n            @on-change=\"changePage\"\r\n            @on-page-size-change=\"changePageSize\"\r\n            :page-size-opts=\"[5,10]\"\r\n            size=\"small\"\r\n            show-total\r\n            show-elevator\r\n            show-sizer\r\n            class=\"page-fix\"\r\n          ></Page>\r\n        </div>\r\n      </transition>\r\n      <transition name=\"back-message-list\">\r\n        <div v-if=\"!showMesTitleList\" class=\"message-view-content-con\">\r\n          <div class=\"message-content-top-bar\">\r\n            <span class=\"mes-back-btn-con\">\r\n              <Button type=\"text\" @click=\"backMesTitleList\">\r\n                <Icon type=\"ios-arrow-back\"></Icon>&nbsp;&nbsp;返回\r\n              </Button>\r\n            </span>\r\n            <h3 class=\"mes-title\">{{ mes.title }}</h3>\r\n          </div>\r\n          <p class=\"mes-time-con\">\r\n            <Icon type=\"android-time\"></Icon>\r\n            &nbsp;&nbsp;{{ mes.time }}\r\n          </p>\r\n          <div class=\"message-content-body\">\r\n            <p class=\"message-content\" v-html=\"mes.content\">{{ mes.content }}</p>\r\n          </div>\r\n        </div>\r\n      </transition>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Cookies from \"js-cookie\";\r\nimport {\r\n  getMessageSendData,\r\n  editMessageSend,\r\n  deleteMessageSend\r\n} from \"@/api/index\";\r\nexport default {\r\n  name: \"message_index\",\r\n  data() {\r\n    const markAsreadBtn = (h, params) => {\r\n      return h(\r\n        \"Button\",\r\n        {\r\n          props: {\r\n            icon: \"md-eye-off\",\r\n            size: \"small\"\r\n          },\r\n          on: {\r\n            click: () => {\r\n              // 标记已读\r\n              let v = params.row;\r\n              // 转换null为\"\"\r\n              for (let attr in v) {\r\n                if (v[attr] == null) {\r\n                  v[attr] = \"\";\r\n                }\r\n              }\r\n              let str = JSON.stringify(v);\r\n              let data = JSON.parse(str);\r\n              data.status = 1;\r\n              this.loading = true;\r\n              editMessageSend(data).then(res => {\r\n                this.loading = false;\r\n                if (res.success) {\r\n                  this.$Message.success(\"操作成功\");\r\n                  this.unreadCount -= 1;\r\n                  this.hasreadCount += 1;\r\n                  this.$store.commit(\"setMessageCount\", this.unreadCount);\r\n                  this.refreshMessage();\r\n                }\r\n              });\r\n            }\r\n          }\r\n        },\r\n        \"标为已读\"\r\n      );\r\n    };\r\n    const deleteMesBtn = (h, params) => {\r\n      return h(\r\n        \"Button\",\r\n        {\r\n          props: {\r\n            icon: \"md-trash\",\r\n            size: \"small\",\r\n            type: \"error\"\r\n          },\r\n          on: {\r\n            click: () => {\r\n              // 移除\r\n              let v = params.row;\r\n              // 转换null为\"\"\r\n              for (let attr in v) {\r\n                if (v[attr] == null) {\r\n                  v[attr] = \"\";\r\n                }\r\n              }\r\n              let str = JSON.stringify(v);\r\n              let data = JSON.parse(str);\r\n              data.status = 2;\r\n              this.loading = true;\r\n              editMessageSend(data).then(res => {\r\n                this.loading = false;\r\n                if (res.success) {\r\n                  this.$Message.success(\"操作成功\");\r\n                  this.hasreadCount -= 1;\r\n                  this.recyclebinCount += 1;\r\n                  this.refreshMessage();\r\n                }\r\n              });\r\n            }\r\n          }\r\n        },\r\n        \"删除\"\r\n      );\r\n    };\r\n    const restoreBtn = (h, params) => {\r\n      return h(\r\n        \"Button\",\r\n        {\r\n          props: {\r\n            icon: \"md-redo\",\r\n            size: \"small\"\r\n          },\r\n          style: {\r\n            margin: \"0 5px 0 0\"\r\n          },\r\n          on: {\r\n            click: () => {\r\n              // 还原\r\n              let v = params.row;\r\n              // 转换null为\"\"\r\n              for (let attr in v) {\r\n                if (v[attr] == null) {\r\n                  v[attr] = \"\";\r\n                }\r\n              }\r\n              let str = JSON.stringify(v);\r\n              let data = JSON.parse(str);\r\n              data.status = 1;\r\n              this.loading = true;\r\n              editMessageSend(data).then(res => {\r\n                this.loading = false;\r\n                if (res.success) {\r\n                  this.$Message.success(\"操作成功\");\r\n                  this.recyclebinCount -= 1;\r\n                  this.hasreadCount += 1;\r\n                  this.refreshMessage();\r\n                }\r\n              });\r\n            }\r\n          }\r\n        },\r\n        \"还原\"\r\n      );\r\n    };\r\n    const deleteRealBtn = (h, params) => {\r\n      return h(\r\n        \"Button\",\r\n        {\r\n          props: {\r\n            icon: \"md-trash\",\r\n            size: \"small\",\r\n            type: \"error\"\r\n          },\r\n          on: {\r\n            click: () => {\r\n              // 彻底删除\r\n              let v = params.row;\r\n              this.loading = true;\r\n              deleteMessageSend({ids: v.id}).then(res => {\r\n                this.loading = false;\r\n                if (res.success) {\r\n                  this.$Message.success(\"操作成功\");\r\n                  this.recyclebinCount -= 1;\r\n                  this.refreshMessage();\r\n                }\r\n              });\r\n            }\r\n          }\r\n        },\r\n        \"彻底删除\"\r\n      );\r\n    };\r\n    return {\r\n      loading: true,\r\n      params: {\r\n        userId: JSON.parse(Cookies.get(\"userInfo\")).id,\r\n        status: 0,\r\n        pageNumber: 1, // 当前页数\r\n        pageSize: 10, // 页面大小\r\n        sort: \"createTime\", // 默认排序字段\r\n        order: \"desc\" // 默认排序方式\r\n      },\r\n      total: 0,\r\n      totalUnread: 0,\r\n      totalRead: 0,\r\n      totalRemove: 0,\r\n      currentMesList: [],\r\n      unreadMesList: [],\r\n      hasreadMesList: [],\r\n      recyclebinList: [],\r\n      currentMessageType: \"unread\",\r\n      showMesTitleList: true,\r\n      unreadCount: 0,\r\n      hasreadCount: 0,\r\n      recyclebinCount: 0,\r\n      noDataText: \"暂无未读消息\",\r\n      mes: {\r\n        title: \"\",\r\n        time: \"\",\r\n        content: \"\"\r\n      },\r\n      dictMessageType: this.$store.state.dict.messageType,\r\n      mesTitleColumns: [\r\n        {\r\n          type: \"index\",\r\n          width: 50,\r\n          align: \"center\"\r\n        },\r\n        {\r\n          title: \" \",\r\n          key: \"title\",\r\n          align: \"left\",\r\n          ellipsis: true,\r\n          render: (h, params) => {\r\n            return h(\"span\", [\r\n              h(\r\n                \"a\",\r\n                {\r\n                  style: {\r\n                    margin: \"0 30px 0 0\"\r\n                  },\r\n                  on: {\r\n                    click: () => {\r\n                      this.showMesTitleList = false;\r\n                      this.mes.title = params.row.title;\r\n                      this.mes.time = params.row.createTime;\r\n                      this.getContent(params.row);\r\n                    }\r\n                  }\r\n                },\r\n                \"【\" + params.row.type + \"】 \" + params.row.title\r\n              )\r\n            ]);\r\n          }\r\n        },\r\n        {\r\n          title: \" \",\r\n          key: \"time\",\r\n          align: \"center\",\r\n          width: 190,\r\n          render: (h, params) => {\r\n            return h(\"span\", [\r\n              h(\"Icon\", {\r\n                props: {\r\n                  type: \"md-time\",\r\n                  size: 16\r\n                },\r\n                style: {\r\n                  margin: \"0 5px 3px 0\"\r\n                }\r\n              }),\r\n              h(\"span\", params.row.createTime)\r\n            ]);\r\n          }\r\n        },\r\n        {\r\n          title: \" \",\r\n          key: \"asread\",\r\n          align: \"center\",\r\n          width: 210,\r\n          render: (h, params) => {\r\n            if (this.currentMessageType == \"unread\") {\r\n              return h(\"div\", [markAsreadBtn(h, params)]);\r\n            } else if (this.currentMessageType == \"hasread\") {\r\n              return h(\"div\", [deleteMesBtn(h, params)]);\r\n            } else {\r\n              return h(\"div\", [\r\n                restoreBtn(h, params),\r\n                deleteRealBtn(h, params)\r\n              ]);\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    };\r\n  },\r\n  methods: {\r\n    changePage(v) {\r\n      this.params.pageNumber = v;\r\n      this.refreshMessage();\r\n    },\r\n    changePageSize(v) {\r\n      this.params.pageSize = v;\r\n      this.refreshMessage();\r\n    },\r\n    refreshMessage() {\r\n      let status = 0;\r\n      let type = this.currentMessageType;\r\n      if (type == \"unread\") {\r\n        status = 0;\r\n      } else if (type == \"hasread\") {\r\n        status = 1;\r\n      } else {\r\n        status = 2;\r\n      }\r\n      this.params.status = status;\r\n      this.loading = true;\r\n      getMessageSendData(this.params).then(res => {\r\n        this.loading = false;\r\n        if (res.success) {\r\n          this.currentMesList = res.result.content;\r\n          this.total = res.result.totalElements;\r\n        }\r\n      });\r\n    },\r\n    initMessage() {\r\n      this.params.status = 0;\r\n      getMessageSendData(this.params).then(res => {\r\n        if (res.success) {\r\n          this.unreadCount = res.result.totalElements;\r\n          this.initReadMessage();\r\n        }\r\n      });\r\n    },\r\n    initReadMessage() {\r\n      this.params.status = 1;\r\n      getMessageSendData(this.params).then(res => {\r\n        if (res.success) {\r\n          this.hasreadCount = res.result.totalElements;\r\n          this.initRemoveMessage();\r\n        }\r\n      });\r\n    },\r\n    initRemoveMessage() {\r\n      this.params.status = 2;\r\n      getMessageSendData(this.params).then(res => {\r\n        if (res.success) {\r\n          this.recyclebinCount = res.result.totalElements;\r\n          this.setCurrentMesType(\"unread\");\r\n        }\r\n      });\r\n    },\r\n    editMessage(status) {\r\n      editMessageSend().then(res => {\r\n        if (res.success) {\r\n          this.$Message.success(\"操作成功\");\r\n        }\r\n      });\r\n    },\r\n    deleteMessage(id) {\r\n      deleteMessageSend({ids: id}).then(res => {\r\n        if (res.success) {\r\n          this.$Message.success(\"删除成功\");\r\n        }\r\n      });\r\n    },\r\n    backMesTitleList() {\r\n      this.showMesTitleList = true;\r\n    },\r\n    setCurrentMesType(type) {\r\n      if (this.currentMessageType !== type) {\r\n        this.showMesTitleList = true;\r\n      }\r\n      this.currentMessageType = type;\r\n      if (type == \"unread\") {\r\n        this.noDataText = \"暂无未读消息\";\r\n      } else if (type == \"hasread\") {\r\n        this.noDataText = \"暂无已读消息\";\r\n      } else {\r\n        this.noDataText = \"回收站无消息\";\r\n      }\r\n      this.params.pageNumber = 1;\r\n      this.refreshMessage();\r\n    },\r\n    getContent(v) {\r\n      this.mes.content = v.content;\r\n    }\r\n  },\r\n  mounted() {\r\n    this.initMessage();\r\n  },\r\n  watch: {\r\n    // 监听路由变化通过id获取数据\r\n    $route(to, from) {\r\n      if (to.name == \"message_index\") {\r\n        this.initMessage();\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n"]}]}