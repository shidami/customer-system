{"remainingRequest":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\src\\views\\main-components\\tags-page-opened.vue?vue&type=style&index=0&lang=less&","dependencies":[{"path":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\src\\views\\main-components\\tags-page-opened.vue","mtime":1614579763271},{"path":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\node_modules\\less-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Documents\\shimin\\current project\\xrcc-front\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpAaW1wb3J0ICIuLi9tYWluLmxlc3MiOw0K"},{"version":3,"sources":["tags-page-opened.vue"],"names":[],"mappings":";AACA","file":"tags-page-opened.vue","sourceRoot":"src/views/main-components","sourcesContent":["<style lang=\"less\">\r\n@import \"../main.less\";\r\n</style>\r\n\r\n<template>\r\n  <div\r\n    ref=\"scrollCon\"\r\n    @DOMMouseScroll=\"handlescroll\"\r\n    @mousewheel=\"handlescroll\"\r\n    class=\"tags-outer-scroll-con\"\r\n  >\r\n    <div class=\"close-all-tag-con\">\r\n      <Dropdown transfer @on-click=\"handleTagsOption\">\r\n        <Button size=\"small\" type=\"primary\">\r\n          {{ $t('tagOption') }}\r\n          <Icon type=\"md-arrow-dropdown\"></Icon>\r\n        </Button>\r\n        <DropdownMenu slot=\"list\">\r\n          <DropdownItem name=\"clearAll\">{{ $t('closeAll') }}</DropdownItem>\r\n          <DropdownItem name=\"clearOthers\">{{ $t('closeOthers') }}</DropdownItem>\r\n        </DropdownMenu>\r\n      </Dropdown>\r\n    </div>\r\n    <div ref=\"scrollBody\" class=\"tags-inner-scroll-body\" :style=\"{left: tagBodyLeft + 'px'}\">\r\n      <transition-group name=\"taglist-moving-animation\">\r\n        <Tag\r\n          type=\"dot\"\r\n          v-for=\"(item, index) in pageTagsList\"\r\n          ref=\"tagsPageOpened\"\r\n          :key=\"item.name\"\r\n          :name=\"item.name\"\r\n          @on-close=\"closePage\"\r\n          @click.native=\"linkTo(item)\"\r\n          :closable=\"item.name=='home_index'?false:true\"\r\n          :color=\"item.children?(item.children[0].name==currentPageName?'primary':'default'):(item.name==currentPageName?'primary':'default')\"\r\n        >{{ itemTitle(item) }}</Tag>\r\n      </transition-group>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"tagsPageOpened\",\r\n  data() {\r\n    return {\r\n      currentPageName: this.$route.name,\r\n      tagBodyLeft: 0,\r\n      refsTag: [],\r\n      tagsCount: 1\r\n    };\r\n  },\r\n  props: {\r\n    pageTagsList: Array,\r\n    beforePush: {\r\n      type: Function,\r\n      default: item => {\r\n        return true;\r\n      }\r\n    }\r\n  },\r\n  computed: {\r\n    title() {\r\n      return this.$store.state.app.currentTitle;\r\n    },\r\n    tagsList() {\r\n      return this.$store.state.app.pageOpenedList;\r\n    }\r\n  },\r\n  methods: {\r\n    itemTitle(item) {\r\n      if (typeof item.title == \"object\") {\r\n        return this.$t(item.title.i18n);\r\n      } else {\r\n        return item.title;\r\n      }\r\n    },\r\n    closePage(event, name) {\r\n      let pageOpenedList = this.$store.state.app.pageOpenedList;\r\n      let lastPageObj = pageOpenedList[0];\r\n      if (this.currentPageName == name) {\r\n        let len = pageOpenedList.length;\r\n        for (let i = 1; i < len; i++) {\r\n          if (pageOpenedList[i].name == name) {\r\n            if (i < len - 1) {\r\n              lastPageObj = pageOpenedList[i + 1];\r\n            } else {\r\n              lastPageObj = pageOpenedList[i - 1];\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        let tagWidth = event.target.parentNode.offsetWidth;\r\n        this.tagBodyLeft = Math.min(this.tagBodyLeft + tagWidth, 0);\r\n      }\r\n      this.$store.commit(\"removeTag\", name);\r\n      this.$store.commit(\"closePage\", name);\r\n      pageOpenedList = this.$store.state.app.pageOpenedList;\r\n      localStorage.pageOpenedList = JSON.stringify(pageOpenedList);\r\n      if (this.currentPageName == name) {\r\n        this.linkTo(lastPageObj);\r\n      }\r\n    },\r\n    linkTo(item) {\r\n      if (this.$route.name == item.name) {\r\n        return;\r\n      }\r\n      let routerObj = {};\r\n      routerObj.name = item.name;\r\n      if (item.argu) {\r\n        routerObj.params = item.argu;\r\n      }\r\n      if (item.query) {\r\n        routerObj.query = item.query;\r\n      }\r\n      if (this.beforePush(item)) {\r\n        this.$router.push(routerObj);\r\n      }\r\n    },\r\n    handlescroll(e) {\r\n      var type = e.type;\r\n      let delta = 0;\r\n      if (type == \"DOMMouseScroll\" || type == \"mousewheel\") {\r\n        delta = e.wheelDelta ? e.wheelDelta : -(e.detail || 0) * 40;\r\n      }\r\n      let left = 0;\r\n      if (delta > 0) {\r\n        left = Math.min(0, this.tagBodyLeft + delta);\r\n      } else {\r\n        if (\r\n          this.$refs.scrollCon.offsetWidth - 100 <\r\n          this.$refs.scrollBody.offsetWidth\r\n        ) {\r\n          if (\r\n            this.tagBodyLeft <\r\n            -(\r\n              this.$refs.scrollBody.offsetWidth -\r\n              this.$refs.scrollCon.offsetWidth +\r\n              100\r\n            )\r\n          ) {\r\n            left = this.tagBodyLeft;\r\n          } else {\r\n            left = Math.max(\r\n              this.tagBodyLeft + delta,\r\n              this.$refs.scrollCon.offsetWidth -\r\n                this.$refs.scrollBody.offsetWidth -\r\n                100\r\n            );\r\n          }\r\n        } else {\r\n          this.tagBodyLeft = 0;\r\n        }\r\n      }\r\n      this.tagBodyLeft = left;\r\n    },\r\n    handleTagsOption(type) {\r\n      if (type == \"clearAll\") {\r\n        this.$store.commit(\"clearAllTags\");\r\n        this.$router.push({\r\n          name: \"home_index\"\r\n        });\r\n      } else {\r\n        this.$store.commit(\"clearOtherTags\", this);\r\n      }\r\n      this.tagBodyLeft = 0;\r\n    },\r\n    moveToView(tag) {\r\n      if (tag.offsetLeft < -this.tagBodyLeft) {\r\n        // 标签在可视区域左侧\r\n        this.tagBodyLeft = -tag.offsetLeft + 10;\r\n      } else if (\r\n        tag.offsetLeft + 10 > -this.tagBodyLeft &&\r\n        tag.offsetLeft + tag.offsetWidth <\r\n          -this.tagBodyLeft + this.$refs.scrollCon.offsetWidth - 100\r\n      ) {\r\n        // 标签在可视区域\r\n        this.tagBodyLeft = Math.min(\r\n          0,\r\n          this.$refs.scrollCon.offsetWidth -\r\n            100 -\r\n            tag.offsetWidth -\r\n            tag.offsetLeft -\r\n            20\r\n        );\r\n      } else {\r\n        // 标签在可视区域右侧\r\n        this.tagBodyLeft = -(\r\n          tag.offsetLeft -\r\n          (this.$refs.scrollCon.offsetWidth - 100 - tag.offsetWidth) +\r\n          20\r\n        );\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.refsTag = this.$refs.tagsPageOpened;\r\n    setTimeout(() => {\r\n      this.refsTag.forEach((item, index) => {\r\n        if (this.$route.name == item.name) {\r\n          let tag = this.refsTag[index].$el;\r\n          this.moveToView(tag);\r\n        }\r\n      });\r\n    }, 1); // 这里不设定时器就会有偏移bug\r\n    this.tagsCount = this.tagsList.length;\r\n  },\r\n  watch: {\r\n    $route(to) {\r\n      this.currentPageName = to.name;\r\n      this.$nextTick(() => {\r\n        this.refsTag.forEach((item, index) => {\r\n          if (to.name == item.name) {\r\n            let tag = this.refsTag[index].$el;\r\n            this.moveToView(tag);\r\n          }\r\n        });\r\n      });\r\n      this.tagsCount = this.tagsList.length;\r\n    }\r\n  }\r\n};\r\n</script>\r\n"]}]}